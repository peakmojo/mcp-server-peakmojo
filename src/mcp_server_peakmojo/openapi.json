{
  "openapi": "3.1.0",
  "info": {
    "title": "ReadyMojo API",
    "description": "API for ReadyMojo platform",
    "version": "1.0.0"
  },
  "paths": {
    "/v1/jobs/": {
      "get": {
        "tags": [
          "Jobs"
        ],
        "summary": "List jobs",
        "description": "Retrieve a list of jobs with pagination support.\n\nReturns a list of jobs sorted by posted date in descending order.\nUse the next_token for pagination to retrieve more results.",
        "operationId": "get_jobs_v1_jobs__get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Maximum number of jobs to return",
              "default": 5,
              "title": "Limit"
            },
            "description": "Maximum number of jobs to return"
          },
          {
            "name": "next_token",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Pagination token",
              "title": "Next Token"
            },
            "description": "Pagination token"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobListResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Jobs"
        ],
        "summary": "Create jobs",
        "description": "Create one or more job listings.\n\nTakes a list of jobs and creates them in the database.\nEach job must include company information and basic job details.\nAdditional details like qualifications and responsibilities will be parsed if available.",
        "operationId": "create_jobs_v1_jobs__post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JobCreateRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Create Jobs V1 Jobs  Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/jobs/{job_id}": {
      "get": {
        "tags": [
          "Jobs"
        ],
        "summary": "Get job by ID",
        "description": "Retrieve detailed information about a specific job by its ID.\n\nReturns all available information about the job including:\n- Basic job details (title, company, location)\n- Full description\n- Qualifications and responsibilities\n- Skills required\n- Application statistics",
        "operationId": "get_job_v1_jobs__job_id__get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "job_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Job Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/practices/": {
      "get": {
        "tags": [
          "Practices"
        ],
        "summary": "Get Practices",
        "description": "Get a list of practice sessions with pagination support.\n\nReturns a list of practice sessions, optionally filtered by user_id.\nResults are sorted by creation date in descending order.",
        "operationId": "get_practices_v1_practices__get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter practices by user ID",
              "title": "User Id"
            },
            "description": "Filter practices by user ID"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "description": "Number of items per page",
              "default": 10,
              "title": "Limit"
            },
            "description": "Number of items per page"
          },
          {
            "name": "last_evaluated_key",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Pagination token from previous response",
              "title": "Last Evaluated Key"
            },
            "description": "Pagination token from previous response"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PracticeListResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Practices"
        ],
        "summary": "Create Practice",
        "description": "Create a new practice session.\n\nCreates a new practice session with the provided details.\nReturns the created practice session with additional system-generated fields.",
        "operationId": "create_practice_v1_practices__post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PracticeCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PracticeResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/practices/{practice_id}": {
      "get": {
        "tags": [
          "Practices"
        ],
        "summary": "Get Practice By Id",
        "description": "Get a specific practice session by ID.\n\nReturns detailed information about a single practice session.\nRaises 404 if practice is not found.",
        "operationId": "get_practice_by_id_v1_practices__practice_id__get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "practice_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Practice Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PracticeResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Practices"
        ],
        "summary": "Update Practice",
        "description": "Update a practice session.\n\nUpdates the specified practice session with new information.\nOnly provided fields will be updated.",
        "operationId": "update_practice_v1_practices__practice_id__patch",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "practice_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Practice Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PracticeResponse"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PracticeResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/practices/{practice_id}/messages": {
      "get": {
        "tags": [
          "Practices"
        ],
        "summary": "Get Practice Messages",
        "description": "Get all messages for a specific practice session.\n\nReturns a chronologically ordered list of messages exchanged during the practice session.\nMessages include both user and system messages.",
        "operationId": "get_practice_messages_v1_practices__practice_id__messages_get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "practice_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Practice Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PracticeMessagesResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Practices"
        ],
        "summary": "Create Practice Message",
        "description": "Add a new message to a practice session.\n\nAdds a new message to the specified practice session.\nMessages can be from either the user or the system.",
        "operationId": "create_practice_message_v1_practices__practice_id__messages_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "practice_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Practice Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PracticeMessage"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PracticeMessageResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/personas/peakmojo_personas": {
      "get": {
        "tags": [
          "Personas"
        ],
        "summary": "Get PeakMojo Personas",
        "description": "Retrieve all pre-built PeakMojo personas",
        "operationId": "get_peakmojo_personas_handler_v1_personas_peakmojo_personas_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonasResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/personas/user/{user_id}": {
      "get": {
        "tags": [
          "Personas"
        ],
        "summary": "Get User Personas",
        "description": "Retrieve all personas accessible to a specific user",
        "operationId": "get_user_personas_handler_v1_personas_user__user_id__get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of the user to get personas for",
              "title": "User Id"
            },
            "description": "ID of the user to get personas for"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonasResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/personas/workspace/{workspace_id}": {
      "get": {
        "tags": [
          "Personas"
        ],
        "summary": "Get Workspace Personas",
        "description": "Retrieve all personas accessible to a specific workspace",
        "operationId": "get_workspace_personas_handler_v1_personas_workspace__workspace_id__get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "workspace_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of the workspace to get personas for",
              "title": "Workspace Id"
            },
            "description": "ID of the workspace to get personas for"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonasResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/personas/{persona_id}": {
      "get": {
        "tags": [
          "Personas"
        ],
        "summary": "Get Persona by ID",
        "description": "Retrieve a specific persona by its ID",
        "operationId": "get_persona_by_id_handler_v1_personas__persona_id__get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "persona_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of the persona to retrieve",
              "title": "Persona Id"
            },
            "description": "ID of the persona to retrieve"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonaResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Personas"
        ],
        "summary": "Update Persona",
        "description": "Update an existing persona by its ID",
        "operationId": "update_persona_handler_v1_personas__persona_id__put",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "persona_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of the persona to update",
              "title": "Persona Id"
            },
            "description": "ID of the persona to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PersonaUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonaResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Personas"
        ],
        "summary": "Delete Persona",
        "description": "Delete a specific persona by its ID",
        "operationId": "delete_persona_handler_v1_personas__persona_id__delete",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "persona_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of the persona to delete",
              "title": "Persona Id"
            },
            "description": "ID of the persona to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/personas": {
      "post": {
        "tags": [
          "Personas"
        ],
        "summary": "Create Persona",
        "description": "Create a new persona with the provided details",
        "operationId": "create_persona_handler_v1_personas_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PersonaCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonaResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/personas/search": {
      "post": {
        "tags": [
          "Personas"
        ],
        "summary": "Search Personas",
        "description": "Search for personas based on query and optional filters",
        "operationId": "search_personas_handler_v1_personas_search_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PersonaSearchParams"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonaSearchResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/personas/tags": {
      "get": {
        "tags": [
          "Personas"
        ],
        "summary": "Get Unique Tags",
        "description": "Retrieve all unique tags used across personas",
        "operationId": "get_unique_persona_tags_handler_v1_personas_tags_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonaTagsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/personas/{persona_id}/tags": {
      "post": {
        "tags": [
          "Personas"
        ],
        "summary": "Manage Persona Tags",
        "description": "Add or remove tags from a persona",
        "operationId": "handle_persona_tags_actions_v1_personas__persona_id__tags_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "persona_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of the persona to update tags for",
              "title": "Persona Id"
            },
            "description": "ID of the persona to update tags for"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PersonaTagAction"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonaResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/personas/{persona_id}/analysis": {
      "get": {
        "tags": [
          "Personas"
        ],
        "summary": "Get Persona Analysis",
        "description": "Retrieve the analysis content for a specific persona from S3",
        "operationId": "get_persona_analysis_handler_v1_personas__persona_id__analysis_get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "persona_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of the persona to get analysis for",
              "title": "Persona Id"
            },
            "description": "ID of the persona to get analysis for"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonaAnalysisResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/scenarios/peakmojo": {
      "get": {
        "tags": [
          "Scenarios"
        ],
        "summary": "Get Peakmojo Scenarios",
        "description": "Get all pre-built PeakMojo scenarios.\n\nReturns a list of scenarios created by PeakMojo for general use.",
        "operationId": "get_peakmojo_scenarios_v1_scenarios_peakmojo_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScenariosListResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/scenarios/user/{user_id}": {
      "get": {
        "tags": [
          "Scenarios"
        ],
        "summary": "Get User Scenarios",
        "description": "Get scenarios accessible to a specific user.\n\nParameters:\n- user_id: The ID of the user whose scenarios to retrieve\n\nReturns a list of scenarios owned by or accessible to the specified user.",
        "operationId": "get_user_scenarios_v1_scenarios_user__user_id__get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "User Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScenariosListResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/scenarios/workspace/{workspace_id}": {
      "get": {
        "tags": [
          "Scenarios"
        ],
        "summary": "Get Workspace Scenarios",
        "description": "Get scenarios accessible to a specific workspace.\n\nParameters:\n- workspace_id: The ID of the workspace whose scenarios to retrieve\n\nReturns a list of scenarios associated with the specified workspace.",
        "operationId": "get_workspace_scenarios_v1_scenarios_workspace__workspace_id__get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "workspace_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Workspace Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScenariosListResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/scenarios/{scenario_id}": {
      "get": {
        "tags": [
          "Scenarios"
        ],
        "summary": "Get Scenario By Id",
        "description": "Get a specific scenario by its ID.\n\nParameters:\n- scenario_id: The unique identifier of the scenario to retrieve\n\nReturns the detailed information of the specified scenario.",
        "operationId": "get_scenario_by_id_v1_scenarios__scenario_id__get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "scenario_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Scenario Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScenarioResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Scenarios"
        ],
        "summary": "Update Scenario",
        "description": "Update an existing scenario.\n\nParameters:\n- scenario_id: The unique identifier of the scenario to update\n- scenario_update: The fields to update and their new values\n\nReturns the updated scenario information.",
        "operationId": "update_scenario_v1_scenarios__scenario_id__put",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "scenario_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Scenario Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ScenarioUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScenarioResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/scenarios/": {
      "post": {
        "tags": [
          "Scenarios"
        ],
        "summary": "Create Scenario",
        "description": "Create a new scenario.\n\nParameters:\n- scenario: The scenario information to create\n\nReturns the newly created scenario information.",
        "operationId": "create_scenario_v1_scenarios__post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ScenarioCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScenarioResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/skills": {
      "get": {
        "tags": [
          "Skills"
        ],
        "summary": "Get All Skills",
        "description": "Retrieve all available skills in the system",
        "operationId": "get_all_skills_v1_skills_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SkillsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "Skills"
        ],
        "summary": "Create Skill",
        "description": "Create a new skill with the provided details",
        "operationId": "create_skill_v1_skills_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSkillRequest",
                "description": "Skill details to create"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SkillResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/skills/{skill_id}": {
      "get": {
        "tags": [
          "Skills"
        ],
        "summary": "Get Skill by ID",
        "description": "Retrieve details of a specific skill by its ID",
        "operationId": "get_skill_by_id_v1_skills__skill_id__get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "skill_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of the skill to retrieve",
              "title": "Skill Id"
            },
            "description": "ID of the skill to retrieve"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SkillResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/skills/user/{user_id}": {
      "get": {
        "tags": [
          "Skills"
        ],
        "summary": "Get User Skills",
        "description": "Retrieve all skills for a specific user with optional filtering",
        "operationId": "get_user_skills_v1_skills_user__user_id__get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of the user to get skills for",
              "title": "User Id"
            },
            "description": "ID of the user to get skills for"
          },
          {
            "name": "category",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter skills by category",
              "title": "Category"
            },
            "description": "Filter skills by category"
          },
          {
            "name": "certified_only",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by certification status",
              "title": "Certified Only"
            },
            "description": "Filter by certification status"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserSkillsResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/skills/user/{user_id}/skill/{skill_id}": {
      "post": {
        "tags": [
          "Skills"
        ],
        "summary": "Start User Skill",
        "description": "Start tracking a skill for a specific user",
        "operationId": "start_user_skill_v1_skills_user__user_id__skill__skill_id__post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of the user",
              "title": "User Id"
            },
            "description": "ID of the user"
          },
          {
            "name": "skill_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of the skill to start",
              "title": "Skill Id"
            },
            "description": "ID of the skill to start"
          }
        ],
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserSkillResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Skills"
        ],
        "summary": "Update User Skill",
        "description": "Update progress for a user's skill",
        "operationId": "update_user_skill_v1_skills_user__user_id__skill__skill_id__put",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of the user",
              "title": "User Id"
            },
            "description": "ID of the user"
          },
          {
            "name": "skill_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of the skill to update",
              "title": "Skill Id"
            },
            "description": "ID of the skill to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserSkillRequest",
                "description": "Updated skill details"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserSkillResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/certificates": {
      "get": {
        "tags": [
          "Certificates"
        ],
        "summary": "Get All Certificates",
        "description": "Retrieve all available certificates. Optionally include associated skills for each certificate.",
        "operationId": "get_certificates_v1_certificates_get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "include_skills",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Whether to include associated skills in the response",
              "default": true,
              "title": "Include Skills"
            },
            "description": "Whether to include associated skills in the response"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CertificatesListResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Certificates"
        ],
        "summary": "Create Certificate",
        "description": "Create a new certificate with specified details.",
        "operationId": "create_certificate_v1_certificates_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCertificateRequest",
                "description": "Certificate details"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CertificateResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/certificates/{certificate_id}": {
      "get": {
        "tags": [
          "Certificates"
        ],
        "summary": "Get Certificate",
        "description": "Retrieve details of a specific certificate by its ID.",
        "operationId": "get_certificate_v1_certificates__certificate_id__get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "certificate_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Certificate ID",
              "title": "Certificate Id"
            },
            "description": "Certificate ID"
          },
          {
            "name": "include_skills",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Include associated skills",
              "default": true,
              "title": "Include Skills"
            },
            "description": "Include associated skills"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Certificate"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Certificates"
        ],
        "summary": "Delete Certificate",
        "description": "Delete a certificate and all its associated data.",
        "operationId": "delete_certificate_v1_certificates__certificate_id__delete",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "certificate_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of the certificate to delete",
              "title": "Certificate Id"
            },
            "description": "ID of the certificate to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Delete Certificate V1 Certificates  Certificate Id  Delete"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/certificates/{certificate_id}/skills": {
      "get": {
        "tags": [
          "Certificates"
        ],
        "summary": "Get Certificate Skills",
        "description": "Retrieve all skills associated with a specific certificate.",
        "operationId": "get_certificate_skills_v1_certificates__certificate_id__skills_get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "certificate_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of the certificate to get skills for",
              "title": "Certificate Id"
            },
            "description": "ID of the certificate to get skills for"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object"
                  },
                  "title": "Response Get Certificate Skills V1 Certificates  Certificate Id  Skills Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Certificates"
        ],
        "summary": "Add Certificate Skill",
        "description": "Add a new skill to a certificate.",
        "operationId": "add_certificate_skill_v1_certificates__certificate_id__skills_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "certificate_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of the certificate to add skill to",
              "title": "Certificate Id"
            },
            "description": "ID of the certificate to add skill to"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddCertificateSkillRequest",
                "description": "Skill details"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Add Certificate Skill V1 Certificates  Certificate Id  Skills Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/certificates/{certificate_id}/skills/{skill_id}": {
      "delete": {
        "tags": [
          "Certificates"
        ],
        "summary": "Remove Certificate Skill",
        "description": "Remove a skill from a certificate.",
        "operationId": "remove_certificate_skill_v1_certificates__certificate_id__skills__skill_id__delete",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "certificate_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of the certificate",
              "title": "Certificate Id"
            },
            "description": "ID of the certificate"
          },
          {
            "name": "skill_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of the skill to remove",
              "title": "Skill Id"
            },
            "description": "ID of the skill to remove"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Remove Certificate Skill V1 Certificates  Certificate Id  Skills  Skill Id  Delete"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/users/{user_id}/certificates": {
      "get": {
        "tags": [
          "Certificates"
        ],
        "summary": "Get User Certificates",
        "description": "Retrieve all certificates associated with a specific user.",
        "operationId": "get_user_certificates_v1_users__user_id__certificates_get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of the user to get certificates for",
              "title": "User Id"
            },
            "description": "ID of the user to get certificates for"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserCertificatesListResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/users/{user_id}/certificates/{certificate_id}/issue": {
      "post": {
        "tags": [
          "Certificates"
        ],
        "summary": "Issue Certificate",
        "description": "Issue a certificate to a user.",
        "operationId": "issue_certificate_v1_users__user_id__certificates__certificate_id__issue_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of the user",
              "title": "User Id"
            },
            "description": "ID of the user"
          },
          {
            "name": "certificate_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of the certificate to issue",
              "title": "Certificate Id"
            },
            "description": "ID of the certificate to issue"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserCertificateResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/users/{user_id}/certificates/{certificate_id}/revoke": {
      "post": {
        "tags": [
          "Certificates"
        ],
        "summary": "Revoke Certificate",
        "description": "Revoke a certificate from a user.",
        "operationId": "revoke_certificate_v1_users__user_id__certificates__certificate_id__revoke_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of the user",
              "title": "User Id"
            },
            "description": "ID of the user"
          },
          {
            "name": "certificate_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of the certificate to revoke",
              "title": "Certificate Id"
            },
            "description": "ID of the certificate to revoke"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserCertificateResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/users/{user_id}/certificates/{certificate_id}": {
      "put": {
        "tags": [
          "Certificates"
        ],
        "summary": "Update User Certificate",
        "description": "Update a user's certificate details (e.g., progress, level).",
        "operationId": "update_user_certificate_v1_users__user_id__certificates__certificate_id__put",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of the user",
              "title": "User Id"
            },
            "description": "ID of the user"
          },
          {
            "name": "certificate_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of the certificate",
              "title": "Certificate Id"
            },
            "description": "ID of the certificate"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserCertificateRequest",
                "description": "Updated certificate details"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserCertificateResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/certificates/{certificate_id}/skills/{skill_id}/courses": {
      "post": {
        "tags": [
          "Certificates"
        ],
        "summary": "Add Skill Course",
        "description": "Add a new course to a certificate skill.",
        "operationId": "add_skill_course_v1_certificates__certificate_id__skills__skill_id__courses_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "certificate_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of the certificate",
              "title": "Certificate Id"
            },
            "description": "ID of the certificate"
          },
          {
            "name": "skill_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of the skill",
              "title": "Skill Id"
            },
            "description": "ID of the skill"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddCourseRequest",
                "description": "Course details"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CourseResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Certificates"
        ],
        "summary": "Get Skill Courses",
        "description": "Retrieve all courses associated with a certificate skill.",
        "operationId": "get_skill_courses_v1_certificates__certificate_id__skills__skill_id__courses_get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "certificate_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of the certificate",
              "title": "Certificate Id"
            },
            "description": "ID of the certificate"
          },
          {
            "name": "skill_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of the skill",
              "title": "Skill Id"
            },
            "description": "ID of the skill"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CoursesListResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/users/{user_id}/certificates/{certificate_id}/skills/{skill_id}/courses/{course_id}": {
      "put": {
        "tags": [
          "Certificates"
        ],
        "summary": "Update User Course",
        "description": "Update a user's progress in a certificate skill course.",
        "operationId": "update_user_course_v1_users__user_id__certificates__certificate_id__skills__skill_id__courses__course_id__put",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of the user",
              "title": "User Id"
            },
            "description": "ID of the user"
          },
          {
            "name": "certificate_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of the certificate",
              "title": "Certificate Id"
            },
            "description": "ID of the certificate"
          },
          {
            "name": "skill_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of the skill",
              "title": "Skill Id"
            },
            "description": "ID of the skill"
          },
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of the course",
              "title": "Course Id"
            },
            "description": "ID of the course"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserCourseRequest",
                "description": "Updated course details"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Update User Course V1 Users  User Id  Certificates  Certificate Id  Skills  Skill Id  Courses  Course Id  Put"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/users": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get Users",
        "operationId": "get_users_v1_users_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UsersResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/users/{user_id}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get User",
        "operationId": "get_user_v1_users__user_id__get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "User Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/users/{user_id}/stats": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get User Stats",
        "operationId": "get_user_stats_v1_users__user_id__stats_get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "User Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserStatsResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/users/stats": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Update User Stats",
        "operationId": "update_user_stats_v1_users_stats_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserStatsUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserStatsResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/job_scenarios/peakmojo_scenarios": {
      "get": {
        "tags": [
          "Job Scenarios"
        ],
        "summary": "Get PeakMojo job scenarios",
        "description": "Retrieve all pre-built job scenarios created by PeakMojo for general use.",
        "operationId": "get_peakmojo_job_scenarios_v1_job_scenarios_peakmojo_scenarios_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobScenariosListResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/job_scenarios/tags": {
      "get": {
        "tags": [
          "Job Scenarios"
        ],
        "summary": "Get unique job scenario tags",
        "description": "Retrieve all unique tags used across job scenarios, optionally grouped by categories.",
        "operationId": "get_job_scenario_tags_v1_job_scenarios_tags_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobScenarioTagsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/job_scenarios/search": {
      "get": {
        "tags": [
          "Job Scenarios"
        ],
        "summary": "Search job scenarios by tags",
        "description": "Search for job scenarios using tags with flexible matching options.",
        "operationId": "search_job_scenarios_v1_job_scenarios_search_get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "tags",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Comma-separated list of tags to search for",
              "title": "Tags"
            },
            "description": "Comma-separated list of tags to search for"
          },
          {
            "name": "match_type",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Match type: 'all' requires all tags to match, 'any' matches if any tag matches",
              "default": "all",
              "title": "Match Type"
            },
            "description": "Match type: 'all' requires all tags to match, 'any' matches if any tag matches"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobScenariosListResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/job_scenarios": {
      "post": {
        "tags": [
          "Job Scenarios"
        ],
        "summary": "Create a new job scenario",
        "description": "Create a new job scenario with the specified details.",
        "operationId": "create_job_scenario_v1_job_scenarios_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JobScenarioCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobScenarioResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/job_scenario/{scenario_id}": {
      "get": {
        "tags": [
          "Job Scenarios"
        ],
        "summary": "Get job scenario by ID",
        "description": "Retrieve a specific job scenario by its unique identifier.",
        "operationId": "get_job_scenario_v1_job_scenario__scenario_id__get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "scenario_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Unique identifier of the job scenario",
              "title": "Scenario Id"
            },
            "description": "Unique identifier of the job scenario"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobScenarioResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Job Scenarios"
        ],
        "summary": "Update job scenario",
        "description": "Update an existing job scenario with new values.",
        "operationId": "update_job_scenario_v1_job_scenario__scenario_id__put",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "scenario_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Unique identifier of the job scenario",
              "title": "Scenario Id"
            },
            "description": "Unique identifier of the job scenario"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JobScenarioUpdate",
                "description": "Updated job scenario data"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobScenarioResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/job_scenario/{scenario_id}/tags/actions": {
      "post": {
        "tags": [
          "Job Scenarios"
        ],
        "summary": "Manage job scenario tags",
        "description": "Perform actions on job scenario tags (clear all tags or remove specific tags).",
        "operationId": "handle_job_scenario_tags_v1_job_scenario__scenario_id__tags_actions_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "scenario_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Unique identifier of the job scenario",
              "title": "Scenario Id"
            },
            "description": "Unique identifier of the job scenario"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JobScenarioTagsActionRequest",
                "description": "Tag action details"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobScenarioResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/workspaces/{workspace_id}/job_scenarios": {
      "get": {
        "tags": [
          "Workspaces"
        ],
        "summary": "Get Workspace Job Scenarios",
        "description": "Retrieve all job scenarios accessible to a specific workspace.",
        "operationId": "get_workspace_job_scenarios_v1_workspaces__workspace_id__job_scenarios_get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "workspace_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of the workspace to get job scenarios for",
              "title": "Workspace Id"
            },
            "description": "ID of the workspace to get job scenarios for"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobScenariosListResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/workspaces/{workspace_id}/scenarios": {
      "get": {
        "tags": [
          "Workspaces"
        ],
        "summary": "Get Workspace Scenarios",
        "description": "Retrieve all scenarios accessible to a specific workspace.",
        "operationId": "get_workspace_scenarios_v1_workspaces__workspace_id__scenarios_get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "workspace_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of the workspace to get scenarios for",
              "title": "Workspace Id"
            },
            "description": "ID of the workspace to get scenarios for"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScenariosListResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/workspaces/{workspace_id}/personas": {
      "get": {
        "tags": [
          "Workspaces"
        ],
        "summary": "Get Workspace Personas",
        "description": "Retrieve all personas accessible to a specific workspace.",
        "operationId": "get_workspace_personas_v1_workspaces__workspace_id__personas_get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "workspace_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of the workspace to get personas for",
              "title": "Workspace Id"
            },
            "description": "ID of the workspace to get personas for"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonasResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/applications": {
      "get": {
        "tags": [
          "Applications"
        ],
        "summary": "List Job Applications",
        "description": "Retrieve a list of job applications with optional filtering and sorting.\n    \n    Query Parameters:\n    - user_id: Filter applications by user ID (required)\n    - sort_by: Sort applications by field (status, company, position, priority, updated_at)\n    - status: Filter by application status\n    - company: Filter by company name\n    - position: Filter by position title\n    - priority: Filter by priority level",
        "operationId": "get_applications_v1_applications_get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of the user to get applications for",
              "title": "User Id"
            },
            "description": "ID of the user to get applications for"
          },
          {
            "name": "sort_by",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Field to sort by",
              "default": "updated_at",
              "title": "Sort By"
            },
            "description": "Field to sort by"
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by status",
              "title": "Status"
            },
            "description": "Filter by status"
          },
          {
            "name": "company",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by company",
              "title": "Company"
            },
            "description": "Filter by company"
          },
          {
            "name": "position",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by position",
              "title": "Position"
            },
            "description": "Filter by position"
          },
          {
            "name": "priority",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by priority",
              "title": "Priority"
            },
            "description": "Filter by priority"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationsListResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Applications"
        ],
        "summary": "Create Job Application",
        "description": "Create a new job application with the provided details.",
        "operationId": "create_application_v1_applications_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApplicationCreate",
                "description": "Application details"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/applications/{app_id}": {
      "get": {
        "tags": [
          "Applications"
        ],
        "summary": "Get Job Application",
        "description": "Retrieve details of a specific job application by its ID.",
        "operationId": "get_application_v1_applications__app_id__get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "app_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of the application to retrieve",
              "title": "App Id"
            },
            "description": "ID of the application to retrieve"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Applications"
        ],
        "summary": "Update Job Application",
        "description": "Update an existing job application with new details.\n    \n    The update can include:\n    - Basic application details (company, position, etc.)\n    - Status changes (which will be recorded in status history)\n    - Interview information\n    - Tags and other metadata",
        "operationId": "update_application_v1_applications__app_id__put",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "app_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of the application to update",
              "title": "App Id"
            },
            "description": "ID of the application to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApplicationUpdate",
                "description": "Updated application details"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Applications"
        ],
        "summary": "Delete Job Application",
        "description": "Delete a specific job application by its ID.",
        "operationId": "delete_application_v1_applications__app_id__delete",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "app_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of the application to delete",
              "title": "App Id"
            },
            "description": "ID of the application to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Application successfully deleted",
            "content": {
              "application/json": {
                "schema": {

                },
                "example": {
                  "message": "Application deleted successfully"
                }
              }
            }
          },
          "404": {
            "description": "Application not found",
            "content": {
              "application/json": {
                "example": {
                  "error": "Application not found"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AddCertificateSkillRequest": {
        "properties": {
          "skill_id": {
            "type": "string",
            "title": "Skill Id",
            "description": "ID of the skill to add"
          }
        },
        "type": "object",
        "required": [
          "skill_id"
        ],
        "title": "AddCertificateSkillRequest",
        "description": "Request model for adding a skill to a certificate"
      },
      "AddCourseRequest": {
        "properties": {
          "title": {
            "type": "string",
            "title": "Title",
            "description": "Title of the course"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Short description of the course"
          },
          "url": {
            "type": "string",
            "title": "Url",
            "description": "URL to the course content"
          },
          "thumbnail_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Thumbnail Url",
            "description": "URL to course thumbnail image"
          },
          "type": {
            "type": "string",
            "title": "Type",
            "description": "Type of course content"
          },
          "duration_minutes": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Duration Minutes",
            "description": "Estimated duration in minutes"
          },
          "provider": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Provider",
            "description": "Provider of the course"
          },
          "cost": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Cost",
            "description": "Cost of the course"
          }
        },
        "type": "object",
        "required": [
          "title",
          "description",
          "url",
          "type"
        ],
        "title": "AddCourseRequest",
        "description": "Request model for adding a course to a certificate skill"
      },
      "ApplicationCreate": {
        "properties": {
          "user_id": {
            "type": "string",
            "title": "User Id",
            "description": "ID of the user who owns this application"
          },
          "job_id": {
            "type": "string",
            "title": "Job Id",
            "description": "ID of the job being applied to"
          },
          "company": {
            "type": "string",
            "title": "Company",
            "description": "Name of the company"
          },
          "position": {
            "type": "string",
            "title": "Position",
            "description": "Job position/title"
          },
          "status": {
            "$ref": "#/components/schemas/ApplicationStatus",
            "description": "Current status of the application",
            "default": "DRAFT"
          },
          "next_steps": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Next Steps",
            "description": "Next steps in the application process"
          },
          "salary_range": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Salary Range",
            "description": "Expected salary range"
          },
          "job_type": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Job Type",
            "description": "Type of job (FULL_TIME, PART_TIME, CONTRACT)"
          },
          "location": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Location",
            "description": "Job location"
          },
          "remote_type": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Remote Type",
            "description": "Remote work type (REMOTE, HYBRID, ONSITE)"
          },
          "application_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Application Url",
            "description": "URL of the job application"
          },
          "company_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Company Url",
            "description": "URL of the company website"
          },
          "recruiter_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Recruiter Name",
            "description": "Name of the recruiter"
          },
          "recruiter_email": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Recruiter Email",
            "description": "Email of the recruiter"
          },
          "priority": {
            "type": "string",
            "title": "Priority",
            "description": "Application priority (HIGH, MEDIUM, LOW)",
            "default": "MEDIUM"
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Tags",
            "description": "List of tags for the application"
          },
          "resume_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Resume Id",
            "description": "ID of the resume used"
          },
          "cover_letter": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Cover Letter",
            "description": "Cover letter content"
          },
          "notes": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Notes",
            "description": "General notes about the application"
          }
        },
        "type": "object",
        "required": [
          "user_id",
          "job_id",
          "company",
          "position"
        ],
        "title": "ApplicationCreate",
        "description": "Model for creating a new application"
      },
      "ApplicationInDB": {
        "properties": {
          "user_id": {
            "type": "string",
            "title": "User Id",
            "description": "ID of the user who owns this application"
          },
          "job_id": {
            "type": "string",
            "title": "Job Id",
            "description": "ID of the job being applied to"
          },
          "company": {
            "type": "string",
            "title": "Company",
            "description": "Name of the company"
          },
          "position": {
            "type": "string",
            "title": "Position",
            "description": "Job position/title"
          },
          "status": {
            "$ref": "#/components/schemas/ApplicationStatus",
            "description": "Current status of the application",
            "default": "DRAFT"
          },
          "next_steps": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Next Steps",
            "description": "Next steps in the application process"
          },
          "salary_range": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Salary Range",
            "description": "Expected salary range"
          },
          "job_type": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Job Type",
            "description": "Type of job (FULL_TIME, PART_TIME, CONTRACT)"
          },
          "location": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Location",
            "description": "Job location"
          },
          "remote_type": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Remote Type",
            "description": "Remote work type (REMOTE, HYBRID, ONSITE)"
          },
          "application_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Application Url",
            "description": "URL of the job application"
          },
          "company_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Company Url",
            "description": "URL of the company website"
          },
          "recruiter_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Recruiter Name",
            "description": "Name of the recruiter"
          },
          "recruiter_email": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Recruiter Email",
            "description": "Email of the recruiter"
          },
          "priority": {
            "type": "string",
            "title": "Priority",
            "description": "Application priority (HIGH, MEDIUM, LOW)",
            "default": "MEDIUM"
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Tags",
            "description": "List of tags for the application"
          },
          "resume_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Resume Id",
            "description": "ID of the resume used"
          },
          "cover_letter": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Cover Letter",
            "description": "Cover letter content"
          },
          "notes": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Notes",
            "description": "General notes about the application"
          },
          "id": {
            "type": "string",
            "title": "Id",
            "description": "Unique identifier for the application"
          },
          "entity_type": {
            "type": "string",
            "title": "Entity Type",
            "description": "Entity type, always APPLICATION",
            "default": "APPLICATION"
          },
          "created_at": {
            "type": "string",
            "title": "Created At",
            "description": "Unix timestamp of creation"
          },
          "updated_at": {
            "type": "string",
            "title": "Updated At",
            "description": "Unix timestamp of last update"
          },
          "applied_at": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Applied At",
            "description": "Unix timestamp of when the application was submitted"
          },
          "status_history": {
            "items": {
              "$ref": "#/components/schemas/StatusHistory"
            },
            "type": "array",
            "title": "Status History",
            "description": "History of status changes"
          },
          "interviews": {
            "items": {
              "$ref": "#/components/schemas/Interview"
            },
            "type": "array",
            "title": "Interviews",
            "description": "List of interviews"
          }
        },
        "type": "object",
        "required": [
          "user_id",
          "job_id",
          "company",
          "position",
          "id",
          "created_at",
          "updated_at"
        ],
        "title": "ApplicationInDB",
        "description": "Model for application as stored in database"
      },
      "ApplicationResponse": {
        "properties": {
          "application": {
            "$ref": "#/components/schemas/ApplicationInDB",
            "description": "Application details"
          }
        },
        "type": "object",
        "required": [
          "application"
        ],
        "title": "ApplicationResponse",
        "description": "Response model for single application"
      },
      "ApplicationStatus": {
        "type": "string",
        "enum": [
          "DRAFT",
          "APPLIED",
          "SCREENING",
          "INTERVIEW_SCHEDULED",
          "INTERVIEWING",
          "OFFER_RECEIVED",
          "OFFER_ACCEPTED",
          "OFFER_DECLINED",
          "REJECTED",
          "WITHDRAWN"
        ],
        "title": "ApplicationStatus"
      },
      "ApplicationUpdate": {
        "properties": {
          "company": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Company",
            "description": "Name of the company"
          },
          "position": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Position",
            "description": "Job position/title"
          },
          "status": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ApplicationStatus"
              },
              {
                "type": "null"
              }
            ],
            "description": "Current status of the application"
          },
          "next_steps": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Next Steps",
            "description": "Next steps in the application process"
          },
          "salary_range": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Salary Range",
            "description": "Expected salary range"
          },
          "job_type": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Job Type",
            "description": "Type of job"
          },
          "location": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Location",
            "description": "Job location"
          },
          "remote_type": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Remote Type",
            "description": "Remote work type"
          },
          "application_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Application Url",
            "description": "URL of the job application"
          },
          "company_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Company Url",
            "description": "URL of the company website"
          },
          "recruiter_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Recruiter Name",
            "description": "Name of the recruiter"
          },
          "recruiter_email": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Recruiter Email",
            "description": "Email of the recruiter"
          },
          "priority": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Priority",
            "description": "Application priority"
          },
          "tags": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tags",
            "description": "List of tags"
          },
          "notes": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Notes",
            "description": "General notes"
          },
          "status_notes": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Status Notes",
            "description": "Notes about status change"
          },
          "interview": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Interview"
              },
              {
                "type": "null"
              }
            ],
            "description": "Interview information to add"
          }
        },
        "type": "object",
        "title": "ApplicationUpdate",
        "description": "Model for updating an existing application"
      },
      "ApplicationsListResponse": {
        "properties": {
          "applications": {
            "items": {
              "$ref": "#/components/schemas/ApplicationInDB"
            },
            "type": "array",
            "title": "Applications",
            "description": "List of applications"
          },
          "count": {
            "type": "integer",
            "title": "Count",
            "description": "Total number of applications"
          }
        },
        "type": "object",
        "required": [
          "applications",
          "count"
        ],
        "title": "ApplicationsListResponse",
        "description": "Response model for multiple applications"
      },
      "Certificate": {
        "properties": {
          "certificate_id": {
            "type": "string",
            "title": "Certificate Id",
            "description": "Unique identifier for the certificate"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the certificate"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "Description of the certificate"
          },
          "issuer": {
            "type": "string",
            "title": "Issuer",
            "description": "Organization issuing the certificate"
          },
          "skills": {
            "items": {
              "$ref": "#/components/schemas/models__job__Skill"
            },
            "type": "array",
            "title": "Skills",
            "description": "List of skills required for this certificate"
          },
          "validity_period": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Validity Period",
            "description": "Validity period in days, null for no expiration"
          },
          "created_at": {
            "type": "string",
            "title": "Created At",
            "description": "Unix timestamp when the certificate was created"
          },
          "updated_at": {
            "type": "string",
            "title": "Updated At",
            "description": "Unix timestamp when the certificate was last updated"
          }
        },
        "type": "object",
        "required": [
          "certificate_id",
          "name",
          "issuer",
          "skills",
          "created_at",
          "updated_at"
        ],
        "title": "Certificate",
        "description": "Certificate model"
      },
      "CertificateResponse": {
        "properties": {
          "certificate_id": {
            "type": "string",
            "title": "Certificate Id",
            "description": "Unique identifier for the certificate"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the certificate"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "Description of the certificate"
          },
          "issuer": {
            "type": "string",
            "title": "Issuer",
            "description": "Organization issuing the certificate"
          },
          "skills": {
            "items": {
              "$ref": "#/components/schemas/models__job__Skill"
            },
            "type": "array",
            "title": "Skills",
            "description": "List of skills required for this certificate"
          },
          "validity_period": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Validity Period",
            "description": "Validity period in days, null for no expiration"
          },
          "created_at": {
            "type": "string",
            "title": "Created At",
            "description": "Unix timestamp when the certificate was created"
          },
          "updated_at": {
            "type": "string",
            "title": "Updated At",
            "description": "Unix timestamp when the certificate was last updated"
          }
        },
        "type": "object",
        "required": [
          "certificate_id",
          "name",
          "issuer",
          "skills",
          "created_at",
          "updated_at"
        ],
        "title": "CertificateResponse",
        "description": "Response model for a single certificate"
      },
      "CertificateStatus": {
        "type": "string",
        "enum": [
          "ACTIVE",
          "EXPIRED",
          "REVOKED"
        ],
        "title": "CertificateStatus"
      },
      "CertificatesListResponse": {
        "properties": {
          "certificates": {
            "items": {
              "$ref": "#/components/schemas/Certificate"
            },
            "type": "array",
            "title": "Certificates",
            "description": "List of certificates"
          }
        },
        "type": "object",
        "required": [
          "certificates"
        ],
        "title": "CertificatesListResponse",
        "description": "Response model for list of certificates"
      },
      "Company": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "description": "Company unique identifier"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Company name"
          },
          "profile_url": {
            "type": "string",
            "title": "Profile Url",
            "description": "Company profile URL"
          },
          "profile_picture_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Profile Picture Url",
            "description": "Company logo URL"
          }
        },
        "type": "object",
        "required": [
          "id",
          "name",
          "profile_url"
        ],
        "title": "Company",
        "description": "Company information for a job posting"
      },
      "Course": {
        "properties": {
          "course_id": {
            "type": "string",
            "title": "Course Id",
            "description": "Unique identifier for the course"
          },
          "title": {
            "type": "string",
            "title": "Title",
            "description": "Title of the course"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Short description of the course"
          },
          "url": {
            "type": "string",
            "title": "Url",
            "description": "URL to the course content"
          },
          "thumbnail_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Thumbnail Url",
            "description": "URL to course thumbnail image"
          },
          "type": {
            "type": "string",
            "title": "Type",
            "description": "Type of course content"
          },
          "duration_minutes": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Duration Minutes",
            "description": "Estimated duration in minutes"
          },
          "created_at": {
            "type": "string",
            "title": "Created At",
            "description": "Unix timestamp when the course was created"
          },
          "updated_at": {
            "type": "string",
            "title": "Updated At",
            "description": "Unix timestamp when the course was last updated"
          }
        },
        "type": "object",
        "required": [
          "course_id",
          "title",
          "description",
          "url",
          "type",
          "created_at",
          "updated_at"
        ],
        "title": "Course",
        "description": "Course model for skill-specific learning content"
      },
      "CourseResponse": {
        "properties": {
          "course_id": {
            "type": "string",
            "title": "Course Id",
            "description": "Unique identifier for the course"
          },
          "title": {
            "type": "string",
            "title": "Title",
            "description": "Title of the course"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Short description of the course"
          },
          "url": {
            "type": "string",
            "title": "Url",
            "description": "URL to the course content"
          },
          "thumbnail_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Thumbnail Url",
            "description": "URL to course thumbnail image"
          },
          "type": {
            "type": "string",
            "title": "Type",
            "description": "Type of course content"
          },
          "duration_minutes": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Duration Minutes",
            "description": "Estimated duration in minutes"
          },
          "created_at": {
            "type": "string",
            "title": "Created At",
            "description": "Unix timestamp when the course was created"
          },
          "updated_at": {
            "type": "string",
            "title": "Updated At",
            "description": "Unix timestamp when the course was last updated"
          }
        },
        "type": "object",
        "required": [
          "course_id",
          "title",
          "description",
          "url",
          "type",
          "created_at",
          "updated_at"
        ],
        "title": "CourseResponse",
        "description": "Response model for a single course"
      },
      "CoursesListResponse": {
        "properties": {
          "courses": {
            "items": {
              "$ref": "#/components/schemas/Course"
            },
            "type": "array",
            "title": "Courses",
            "description": "List of courses"
          }
        },
        "type": "object",
        "required": [
          "courses"
        ],
        "title": "CoursesListResponse",
        "description": "Response model for list of courses"
      },
      "CreateCertificateRequest": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the certificate"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "Description of the certificate"
          },
          "issuer": {
            "type": "string",
            "title": "Issuer",
            "description": "Organization issuing the certificate"
          },
          "skills": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Skills",
            "description": "List of skill IDs required for this certificate"
          },
          "validity_period": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Validity Period",
            "description": "Validity period in days, null for no expiration"
          }
        },
        "type": "object",
        "required": [
          "name",
          "issuer",
          "skills"
        ],
        "title": "CreateCertificateRequest",
        "description": "Request model for creating a certificate"
      },
      "CreateSkillRequest": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the skill"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "Description of the skill",
            "default": ""
          },
          "category": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Category",
            "description": "Category the skill belongs to",
            "default": "OTHER"
          },
          "level": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Level",
            "description": "Skill difficulty level (ENTRY_LEVEL/INTERMEDIATE/ADVANCED)",
            "default": "ENTRY_LEVEL"
          },
          "prerequisites": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Prerequisites",
            "description": "List of prerequisite skill IDs",
            "default": []
          }
        },
        "type": "object",
        "required": [
          "name"
        ],
        "title": "CreateSkillRequest"
      },
      "EntityType": {
        "type": "string",
        "enum": [
          "PERSONA",
          "SCENARIO",
          "JOB_SCENARIO",
          "APPLICATION",
          "PRACTICE",
          "PRACTICE_MESSAGE",
          "JOB",
          "CERTIFICATE",
          "USER_CERTIFICATE",
          "USER",
          "WORKSPACE"
        ],
        "title": "EntityType"
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "Interview": {
        "properties": {
          "type": {
            "$ref": "#/components/schemas/InterviewType",
            "description": "Type of interview (e.g., PHONE_SCREEN, TECHNICAL)"
          },
          "scheduled_at": {
            "type": "string",
            "title": "Scheduled At",
            "description": "Unix timestamp of when the interview is scheduled"
          },
          "notes": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Notes",
            "description": "Notes about the interview"
          },
          "location": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Location",
            "description": "Interview location or meeting link"
          },
          "interviewer": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Interviewer",
            "description": "Name of the interviewer"
          },
          "status": {
            "type": "string",
            "title": "Status",
            "description": "Status of the interview",
            "default": "SCHEDULED"
          }
        },
        "type": "object",
        "required": [
          "type",
          "scheduled_at"
        ],
        "title": "Interview",
        "description": "Model for job interview data"
      },
      "InterviewData": {
        "properties": {
          "company": {
            "type": "string",
            "title": "Company",
            "description": "Company name"
          },
          "position": {
            "type": "string",
            "title": "Position",
            "description": "Position title"
          },
          "type": {
            "type": "string",
            "title": "Type",
            "description": "Type of interview"
          },
          "scheduled_at": {
            "type": "string",
            "title": "Scheduled At",
            "description": "Unix timestamp of when the interview is scheduled"
          },
          "status": {
            "type": "string",
            "title": "Status",
            "description": "Status of the interview",
            "default": "SCHEDULED"
          }
        },
        "type": "object",
        "required": [
          "company",
          "position",
          "type",
          "scheduled_at"
        ],
        "title": "InterviewData",
        "description": "Interview data model"
      },
      "InterviewType": {
        "type": "string",
        "enum": [
          "PHONE_SCREEN",
          "TECHNICAL",
          "BEHAVIORAL",
          "ONSITE",
          "TAKE_HOME",
          "FINAL"
        ],
        "title": "InterviewType"
      },
      "JobCreate": {
        "properties": {
          "title": {
            "type": "string",
            "title": "Title",
            "description": "Job title"
          },
          "company": {
            "$ref": "#/components/schemas/Company",
            "description": "Company information"
          },
          "location": {
            "type": "string",
            "title": "Location",
            "description": "Job location"
          },
          "url": {
            "type": "string",
            "title": "Url",
            "description": "Job posting URL"
          },
          "reference_id": {
            "type": "string",
            "title": "Reference Id",
            "description": "External reference ID"
          },
          "posted_at": {
            "type": "string",
            "title": "Posted At",
            "description": "Job posting timestamp"
          },
          "id": {
            "type": "string",
            "title": "Id",
            "description": "Job unique identifier"
          },
          "details": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Details",
            "description": "Additional job details"
          }
        },
        "type": "object",
        "required": [
          "title",
          "company",
          "location",
          "url",
          "reference_id",
          "posted_at",
          "id"
        ],
        "title": "JobCreate",
        "description": "Schema for creating a job"
      },
      "JobCreateRequest": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/JobCreate"
            },
            "type": "array",
            "title": "Items",
            "description": "List of jobs to create"
          }
        },
        "type": "object",
        "required": [
          "items"
        ],
        "title": "JobCreateRequest",
        "description": "Request schema for creating jobs in batch"
      },
      "JobListResponse": {
        "properties": {
          "jobs": {
            "items": {
              "$ref": "#/components/schemas/JobResponse"
            },
            "type": "array",
            "title": "Jobs",
            "description": "List of jobs"
          },
          "count": {
            "type": "integer",
            "title": "Count",
            "description": "Number of jobs returned"
          },
          "next_token": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Next Token",
            "description": "Token for pagination"
          }
        },
        "type": "object",
        "required": [
          "jobs",
          "count"
        ],
        "title": "JobListResponse",
        "description": "Response schema for listing jobs"
      },
      "JobResponse": {
        "properties": {
          "pk": {
            "type": "string",
            "title": "Pk",
            "description": "Primary key"
          },
          "sk": {
            "type": "string",
            "title": "Sk",
            "description": "Sort key"
          },
          "entity_type": {
            "type": "string",
            "title": "Entity Type",
            "description": "Entity type"
          },
          "title": {
            "type": "string",
            "title": "Title",
            "description": "Job title"
          },
          "company": {
            "type": "string",
            "title": "Company",
            "description": "Company name"
          },
          "company_id": {
            "type": "string",
            "title": "Company Id",
            "description": "Company unique identifier"
          },
          "company_url": {
            "type": "string",
            "title": "Company Url",
            "description": "Company profile URL"
          },
          "company_logo": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Company Logo",
            "description": "Company logo URL"
          },
          "location": {
            "type": "string",
            "title": "Location",
            "description": "Job location"
          },
          "job_url": {
            "type": "string",
            "title": "Job Url",
            "description": "Job posting URL"
          },
          "reference_id": {
            "type": "string",
            "title": "Reference Id",
            "description": "External reference ID"
          },
          "posted_at": {
            "type": "string",
            "title": "Posted At",
            "description": "Job posting timestamp as epoch"
          },
          "posted_at_iso": {
            "type": "string",
            "title": "Posted At Iso",
            "description": "Job posting timestamp in ISO format"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "Full job description"
          },
          "state": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "State",
            "description": "Job state"
          },
          "applicants_count": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Applicants Count",
            "description": "Number of applicants"
          },
          "created_at": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Created At",
            "description": "Job creation timestamp"
          },
          "published_at": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Published At",
            "description": "Job publication timestamp"
          },
          "salary_range": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Salary Range",
            "description": "Salary range if available"
          },
          "qualifications": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Qualifications",
            "description": "List of qualifications"
          },
          "responsibilities": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Responsibilities",
            "description": "List of responsibilities"
          },
          "skills": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Skills",
            "description": "List of required skills"
          },
          "status": {
            "type": "string",
            "title": "Status",
            "description": "Job status",
            "default": "ACTIVE"
          }
        },
        "type": "object",
        "required": [
          "pk",
          "sk",
          "entity_type",
          "title",
          "company",
          "company_id",
          "company_url",
          "location",
          "job_url",
          "reference_id",
          "posted_at",
          "posted_at_iso"
        ],
        "title": "JobResponse",
        "description": "Response schema for job details"
      },
      "JobScenarioCreate": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the job scenario"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Description of the job scenario"
          },
          "instruction": {
            "type": "string",
            "title": "Instruction",
            "description": "Instructions for the job scenario"
          },
          "persona_id": {
            "type": "string",
            "title": "Persona Id",
            "description": "ID of the associated persona"
          },
          "scenario_type": {
            "$ref": "#/components/schemas/ScenarioType",
            "description": "Type of scenario (PEAKMOJO, USER, WORKSPACE)"
          },
          "metadata": {
            "$ref": "#/components/schemas/JobScenarioMetadata",
            "description": "Additional metadata about the scenario"
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Tags",
            "description": "List of tags"
          },
          "user_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "User Id",
            "description": "Owner user ID for USER type scenarios"
          },
          "workspace_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Workspace Id",
            "description": "Owner workspace ID for WORKSPACE type scenarios"
          }
        },
        "type": "object",
        "required": [
          "name",
          "description",
          "instruction",
          "persona_id",
          "scenario_type"
        ],
        "title": "JobScenarioCreate",
        "description": "Model for creating a new job scenario"
      },
      "JobScenarioInDB": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the job scenario"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Description of the job scenario"
          },
          "instruction": {
            "type": "string",
            "title": "Instruction",
            "description": "Instructions for the job scenario"
          },
          "persona_id": {
            "type": "string",
            "title": "Persona Id",
            "description": "ID of the associated persona"
          },
          "scenario_type": {
            "$ref": "#/components/schemas/ScenarioType",
            "description": "Type of scenario (PEAKMOJO, USER, WORKSPACE)"
          },
          "metadata": {
            "$ref": "#/components/schemas/JobScenarioMetadata",
            "description": "Additional metadata about the scenario"
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Tags",
            "description": "List of tags"
          },
          "user_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "User Id",
            "description": "Owner user ID for USER type scenarios"
          },
          "workspace_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Workspace Id",
            "description": "Owner workspace ID for WORKSPACE type scenarios"
          },
          "id": {
            "type": "string",
            "title": "Id",
            "description": "Unique identifier for the job scenario"
          },
          "entity_type": {
            "type": "string",
            "title": "Entity Type",
            "description": "Entity type, always JOB_SCENARIO",
            "default": "JOB_SCENARIO"
          },
          "created_at": {
            "type": "string",
            "title": "Created At",
            "description": "Unix timestamp of when the scenario was created"
          },
          "updated_at": {
            "type": "string",
            "title": "Updated At",
            "description": "Unix timestamp of when the scenario was last updated"
          }
        },
        "type": "object",
        "required": [
          "name",
          "description",
          "instruction",
          "persona_id",
          "scenario_type",
          "id",
          "created_at",
          "updated_at"
        ],
        "title": "JobScenarioInDB",
        "description": "Model for job scenario as stored in the database"
      },
      "JobScenarioMetadata": {
        "properties": {
          "industry": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Industry",
            "description": "Industry the scenario is related to"
          },
          "job_function": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Job Function",
            "description": "Job function or role"
          },
          "experience_level": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Experience Level",
            "description": "Required experience level"
          },
          "required_skills": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Required Skills",
            "description": "List of required skills"
          },
          "duration": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Duration",
            "description": "Expected duration in minutes"
          },
          "objectives": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Objectives",
            "description": "Learning objectives"
          },
          "difficulty": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Difficulty",
            "description": "Difficulty level of the scenario"
          },
          "category": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Category",
            "description": "Category of the scenario"
          },
          "subcategory": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Subcategory",
            "description": "Subcategory within the category"
          }
        },
        "type": "object",
        "title": "JobScenarioMetadata",
        "description": "Metadata for a job scenario"
      },
      "JobScenarioResponse": {
        "properties": {
          "scenario": {
            "$ref": "#/components/schemas/JobScenarioInDB"
          }
        },
        "type": "object",
        "required": [
          "scenario"
        ],
        "title": "JobScenarioResponse",
        "description": "Single job scenario response"
      },
      "JobScenarioTagsActionRequest": {
        "properties": {
          "action": {
            "type": "string",
            "title": "Action",
            "description": "Action to perform on tags (clear or remove)"
          },
          "tags": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tags",
            "description": "List of tags to remove when action is 'remove'"
          }
        },
        "type": "object",
        "required": [
          "action"
        ],
        "title": "JobScenarioTagsActionRequest",
        "description": "Request model for job scenario tags actions"
      },
      "JobScenarioTagsResponse": {
        "properties": {
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Tags",
            "description": "List of all unique tags"
          },
          "tag_groups": {
            "anyOf": [
              {
                "items": {
                  "additionalProperties": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "type": "object"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tag Groups",
            "description": "Optional grouping of related tags"
          }
        },
        "type": "object",
        "required": [
          "tags"
        ],
        "title": "JobScenarioTagsResponse",
        "description": "Response model for job scenario tags"
      },
      "JobScenarioUpdate": {
        "properties": {
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name",
            "description": "Name of the job scenario"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "Description of the job scenario"
          },
          "instruction": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Instruction",
            "description": "Instructions for the job scenario"
          },
          "persona_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Persona Id",
            "description": "ID of the associated persona"
          },
          "metadata": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/JobScenarioMetadata"
              },
              {
                "type": "null"
              }
            ],
            "description": "Additional metadata"
          },
          "tags": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tags",
            "description": "List of tags"
          }
        },
        "type": "object",
        "title": "JobScenarioUpdate",
        "description": "Model for updating an existing job scenario"
      },
      "JobScenariosListResponse": {
        "properties": {
          "scenarios": {
            "items": {
              "$ref": "#/components/schemas/JobScenarioInDB"
            },
            "type": "array",
            "title": "Scenarios"
          }
        },
        "type": "object",
        "required": [
          "scenarios"
        ],
        "title": "JobScenariosListResponse",
        "description": "Multiple job scenarios response"
      },
      "ParticipantInfo": {
        "properties": {
          "role": {
            "type": "string",
            "title": "Role",
            "description": "Role of the participant"
          },
          "message_count": {
            "type": "integer",
            "title": "Message Count",
            "description": "Number of messages from this participant"
          }
        },
        "type": "object",
        "required": [
          "role",
          "message_count"
        ],
        "title": "ParticipantInfo"
      },
      "Persona": {
        "properties": {
          "persona_id": {
            "type": "string",
            "title": "Persona Id",
            "description": "Unique identifier for the persona"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the persona"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Detailed description of the persona"
          },
          "system_message": {
            "type": "string",
            "title": "System Message",
            "description": "System message for AI interaction"
          },
          "model": {
            "type": "string",
            "title": "Model",
            "description": "AI model to be used"
          },
          "temperature": {
            "type": "number",
            "title": "Temperature",
            "description": "Temperature parameter for AI responses"
          },
          "max_tokens": {
            "type": "integer",
            "title": "Max Tokens",
            "description": "Maximum tokens for AI responses"
          },
          "top_p": {
            "type": "number",
            "title": "Top P",
            "description": "Top p parameter for AI responses"
          },
          "frequency_penalty": {
            "type": "number",
            "title": "Frequency Penalty",
            "description": "Frequency penalty for AI responses"
          },
          "presence_penalty": {
            "type": "number",
            "title": "Presence Penalty",
            "description": "Presence penalty for AI responses"
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Tags",
            "description": "Tags associated with the persona"
          },
          "providers": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Providers",
            "description": "List of supported providers"
          },
          "metadata": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/PersonaMetadata"
              },
              {
                "type": "null"
              }
            ],
            "description": "Additional metadata about the persona"
          },
          "entity_type": {
            "type": "string",
            "title": "Entity Type",
            "description": "Entity type, always PERSONA"
          },
          "persona_type": {
            "type": "string",
            "title": "Persona Type",
            "description": "Type of persona (PEAKMOJO, USER, WORKSPACE)"
          },
          "user_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "User Id",
            "description": "ID of the user who created the persona"
          },
          "workspace_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Workspace Id",
            "description": "ID of the workspace the persona belongs to"
          },
          "created_at": {
            "type": "integer",
            "title": "Created At",
            "description": "Unix timestamp of creation"
          },
          "updated_at": {
            "type": "integer",
            "title": "Updated At",
            "description": "Unix timestamp of last update"
          }
        },
        "type": "object",
        "required": [
          "persona_id",
          "name",
          "description",
          "system_message",
          "model",
          "temperature",
          "max_tokens",
          "top_p",
          "frequency_penalty",
          "presence_penalty",
          "entity_type",
          "persona_type",
          "created_at",
          "updated_at"
        ],
        "title": "Persona"
      },
      "PersonaAnalysisResponse": {
        "properties": {
          "content": {
            "type": "string",
            "title": "Content",
            "description": "Content of the persona analysis"
          }
        },
        "type": "object",
        "required": [
          "content"
        ],
        "title": "PersonaAnalysisResponse"
      },
      "PersonaCreate": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the persona"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Detailed description of the persona"
          },
          "system_message": {
            "type": "string",
            "title": "System Message",
            "description": "System message for AI interaction"
          },
          "model": {
            "type": "string",
            "title": "Model",
            "description": "AI model to be used"
          },
          "temperature": {
            "type": "number",
            "title": "Temperature",
            "description": "Temperature parameter for AI responses"
          },
          "max_tokens": {
            "type": "integer",
            "title": "Max Tokens",
            "description": "Maximum tokens for AI responses"
          },
          "top_p": {
            "type": "number",
            "title": "Top P",
            "description": "Top p parameter for AI responses"
          },
          "frequency_penalty": {
            "type": "number",
            "title": "Frequency Penalty",
            "description": "Frequency penalty for AI responses"
          },
          "presence_penalty": {
            "type": "number",
            "title": "Presence Penalty",
            "description": "Presence penalty for AI responses"
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Tags",
            "description": "Tags associated with the persona"
          },
          "providers": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Providers",
            "description": "List of supported providers"
          },
          "metadata": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/PersonaMetadata"
              },
              {
                "type": "null"
              }
            ],
            "description": "Additional metadata about the persona"
          },
          "persona_type": {
            "type": "string",
            "title": "Persona Type",
            "description": "Type of persona (PEAKMOJO, USER, WORKSPACE)"
          },
          "user_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "User Id",
            "description": "ID of the user who created the persona"
          },
          "workspace_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Workspace Id",
            "description": "ID of the workspace the persona belongs to"
          }
        },
        "type": "object",
        "required": [
          "name",
          "description",
          "system_message",
          "model",
          "temperature",
          "max_tokens",
          "top_p",
          "frequency_penalty",
          "presence_penalty",
          "persona_type"
        ],
        "title": "PersonaCreate"
      },
      "PersonaInfo": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the persona"
          },
          "role": {
            "type": "string",
            "title": "Role",
            "description": "Role of the persona"
          },
          "persona_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Persona Id"
          }
        },
        "type": "object",
        "required": [
          "name",
          "role"
        ],
        "title": "PersonaInfo"
      },
      "PersonaMetadata": {
        "properties": {
          "voice": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Voice",
            "description": "Voice characteristics of the persona"
          },
          "pain_points": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Pain Points",
            "description": "Key pain points or challenges"
          },
          "company": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Company",
            "description": "Associated company"
          },
          "position": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Position",
            "description": "Job position or role"
          },
          "personality_traits": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Personality Traits",
            "description": "List of personality traits"
          },
          "portraitImageUrl": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Portraitimageurl",
            "description": "URL to persona's portrait image"
          },
          "analysis_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Analysis Url",
            "description": "URL to persona analysis"
          },
          "industry": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Industry",
            "description": "Industry sector"
          },
          "demographics": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Demographics",
            "description": "Demographic information"
          }
        },
        "type": "object",
        "title": "PersonaMetadata"
      },
      "PersonaResponse": {
        "properties": {
          "persona": {
            "$ref": "#/components/schemas/Persona",
            "description": "Single persona details"
          }
        },
        "type": "object",
        "required": [
          "persona"
        ],
        "title": "PersonaResponse"
      },
      "PersonaSearchParams": {
        "properties": {
          "query": {
            "type": "string",
            "title": "Query",
            "description": "Search query string"
          },
          "filters": {
            "anyOf": [
              {
                "additionalProperties": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Filters",
            "description": "Optional filters to apply"
          }
        },
        "type": "object",
        "required": [
          "query"
        ],
        "title": "PersonaSearchParams"
      },
      "PersonaSearchResponse": {
        "properties": {
          "personas": {
            "items": {
              "$ref": "#/components/schemas/Persona"
            },
            "type": "array",
            "title": "Personas",
            "description": "List of matching personas"
          },
          "total": {
            "type": "integer",
            "title": "Total",
            "description": "Total number of matches"
          }
        },
        "type": "object",
        "required": [
          "personas",
          "total"
        ],
        "title": "PersonaSearchResponse"
      },
      "PersonaTagAction": {
        "properties": {
          "action": {
            "type": "string",
            "title": "Action",
            "description": "Action to perform (add or remove)"
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Tags",
            "description": "List of tags to add or remove"
          }
        },
        "type": "object",
        "required": [
          "action",
          "tags"
        ],
        "title": "PersonaTagAction"
      },
      "PersonaTagsResponse": {
        "properties": {
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Tags",
            "description": "List of unique tags"
          }
        },
        "type": "object",
        "required": [
          "tags"
        ],
        "title": "PersonaTagsResponse"
      },
      "PersonaUpdate": {
        "properties": {
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name",
            "description": "Name of the persona"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "Detailed description of the persona"
          },
          "system_message": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "System Message",
            "description": "System message for AI interaction"
          },
          "model": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Model",
            "description": "AI model to be used"
          },
          "temperature": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Temperature",
            "description": "Temperature parameter for AI responses"
          },
          "max_tokens": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Max Tokens",
            "description": "Maximum tokens for AI responses"
          },
          "top_p": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Top P",
            "description": "Top p parameter for AI responses"
          },
          "frequency_penalty": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Frequency Penalty",
            "description": "Frequency penalty for AI responses"
          },
          "presence_penalty": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Presence Penalty",
            "description": "Presence penalty for AI responses"
          },
          "tags": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tags",
            "description": "Tags associated with the persona"
          },
          "providers": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Providers",
            "description": "List of supported providers"
          },
          "metadata": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/PersonaMetadata"
              },
              {
                "type": "null"
              }
            ],
            "description": "Additional metadata about the persona"
          }
        },
        "type": "object",
        "title": "PersonaUpdate"
      },
      "PersonasResponse": {
        "properties": {
          "personas": {
            "items": {
              "$ref": "#/components/schemas/Persona"
            },
            "type": "array",
            "title": "Personas",
            "description": "List of personas"
          }
        },
        "type": "object",
        "required": [
          "personas"
        ],
        "title": "PersonasResponse"
      },
      "PracticeCreate": {
        "properties": {
          "practice_id": {
            "type": "string",
            "title": "Practice Id",
            "description": "Unique identifier of the practice session"
          },
          "app_type": {
            "type": "string",
            "title": "App Type",
            "description": "Type of the application"
          },
          "user_info": {
            "$ref": "#/components/schemas/UserInfo",
            "description": "Information about the user"
          },
          "callback_url": {
            "type": "string",
            "title": "Callback Url",
            "description": "Callback URL for the practice session"
          },
          "scenarios_info": {
            "$ref": "#/components/schemas/ScenarioInfo",
            "description": "Information about the scenario"
          },
          "persona_info": {
            "$ref": "#/components/schemas/PersonaInfo",
            "description": "Information about the persona"
          }
        },
        "type": "object",
        "required": [
          "practice_id",
          "app_type",
          "user_info",
          "callback_url",
          "scenarios_info",
          "persona_info"
        ],
        "title": "PracticeCreate"
      },
      "PracticeListResponse": {
        "properties": {
          "practices": {
            "items": {
              "$ref": "#/components/schemas/PracticeResponse"
            },
            "type": "array",
            "title": "Practices",
            "description": "List of practices"
          },
          "count": {
            "type": "integer",
            "title": "Count",
            "description": "Number of practices returned"
          },
          "last_evaluated_key": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Evaluated Key",
            "description": "Key for pagination"
          },
          "has_more": {
            "type": "boolean",
            "title": "Has More",
            "description": "Whether there are more results available"
          }
        },
        "type": "object",
        "required": [
          "practices",
          "count",
          "has_more"
        ],
        "title": "PracticeListResponse"
      },
      "PracticeMessage": {
        "properties": {
          "content": {
            "type": "string",
            "title": "Content",
            "description": "Content of the message"
          },
          "role": {
            "type": "string",
            "title": "Role",
            "description": "Role of the message sender"
          },
          "type": {
            "type": "string",
            "title": "Type",
            "description": "Type of the message (text, code, image, etc.)",
            "default": "text"
          },
          "metadata": {
            "type": "object",
            "title": "Metadata",
            "description": "Additional metadata for the message"
          },
          "direction": {
            "type": "string",
            "title": "Direction",
            "description": "Direction of the message (inbound/outbound)",
            "default": "outbound"
          }
        },
        "type": "object",
        "required": [
          "content",
          "role"
        ],
        "title": "PracticeMessage"
      },
      "PracticeMessageResponse": {
        "properties": {
          "content": {
            "type": "string",
            "title": "Content",
            "description": "Content of the message"
          },
          "role": {
            "type": "string",
            "title": "Role",
            "description": "Role of the message sender"
          },
          "type": {
            "type": "string",
            "title": "Type",
            "description": "Type of the message (text, code, image, etc.)",
            "default": "text"
          },
          "metadata": {
            "type": "object",
            "title": "Metadata",
            "description": "Additional metadata for the message"
          },
          "direction": {
            "type": "string",
            "title": "Direction",
            "description": "Direction of the message (inbound/outbound)",
            "default": "outbound"
          },
          "id": {
            "type": "string",
            "title": "Id",
            "description": "Unique identifier of the message"
          },
          "practice_id": {
            "type": "string",
            "title": "Practice Id",
            "description": "ID of the practice this message belongs to"
          },
          "timestamp": {
            "type": "string",
            "title": "Timestamp",
            "description": "Timestamp when the message was created"
          },
          "entity_type": {
            "$ref": "#/components/schemas/EntityType",
            "description": "Entity type, always PRACTICE_MESSAGE",
            "default": "PRACTICE_MESSAGE"
          },
          "pk": {
            "type": "string",
            "title": "Pk",
            "description": "Primary key in DynamoDB"
          },
          "sk": {
            "type": "string",
            "title": "Sk",
            "description": "Sort key in DynamoDB"
          }
        },
        "type": "object",
        "required": [
          "content",
          "role",
          "id",
          "practice_id",
          "timestamp",
          "pk",
          "sk"
        ],
        "title": "PracticeMessageResponse"
      },
      "PracticeMessagesResponse": {
        "properties": {
          "practice_id": {
            "type": "string",
            "title": "Practice Id",
            "description": "ID of the practice session"
          },
          "participants": {
            "items": {
              "$ref": "#/components/schemas/ParticipantInfo"
            },
            "type": "array",
            "title": "Participants",
            "description": "Information about participants"
          },
          "messages": {
            "items": {
              "$ref": "#/components/schemas/PracticeMessageResponse"
            },
            "type": "array",
            "title": "Messages",
            "description": "List of messages"
          },
          "message_count": {
            "type": "integer",
            "title": "Message Count",
            "description": "Total number of messages"
          }
        },
        "type": "object",
        "required": [
          "practice_id",
          "participants",
          "messages",
          "message_count"
        ],
        "title": "PracticeMessagesResponse"
      },
      "PracticeResponse": {
        "properties": {
          "practice_id": {
            "type": "string",
            "title": "Practice Id",
            "description": "Unique identifier of the practice session"
          },
          "app_type": {
            "type": "string",
            "title": "App Type",
            "description": "Type of the application"
          },
          "user_info": {
            "$ref": "#/components/schemas/UserInfo",
            "description": "Information about the user"
          },
          "callback_url": {
            "type": "string",
            "title": "Callback Url",
            "description": "Callback URL for the practice session"
          },
          "scenarios_info": {
            "$ref": "#/components/schemas/ScenarioInfo",
            "description": "Information about the scenario"
          },
          "persona_info": {
            "$ref": "#/components/schemas/PersonaInfo",
            "description": "Information about the persona"
          },
          "status": {
            "$ref": "#/components/schemas/PracticeStatus",
            "description": "Current status of the practice"
          },
          "created_at": {
            "type": "string",
            "title": "Created At",
            "description": "Timestamp when the practice was created"
          },
          "updated_at": {
            "type": "string",
            "title": "Updated At",
            "description": "Timestamp when the practice was last updated"
          },
          "entity_type": {
            "$ref": "#/components/schemas/EntityType",
            "description": "Entity type, always PRACTICE",
            "default": "PRACTICE"
          },
          "pk": {
            "type": "string",
            "title": "Pk",
            "description": "Primary key in DynamoDB"
          },
          "sk": {
            "type": "string",
            "title": "Sk",
            "description": "Sort key in DynamoDB"
          }
        },
        "type": "object",
        "required": [
          "practice_id",
          "app_type",
          "user_info",
          "callback_url",
          "scenarios_info",
          "persona_info",
          "status",
          "created_at",
          "updated_at",
          "pk",
          "sk"
        ],
        "title": "PracticeResponse"
      },
      "PracticeStatus": {
        "type": "string",
        "enum": [
          "CREATED",
          "IN_PROGRESS",
          "COMPLETED",
          "REVIEWED",
          "ARCHIVED"
        ],
        "title": "PracticeStatus"
      },
      "ScenarioCreate": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the scenario"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Description of the scenario"
          },
          "instruction": {
            "type": "string",
            "title": "Instruction",
            "description": "Instructions for the scenario"
          },
          "persona_id": {
            "type": "string",
            "title": "Persona Id",
            "description": "ID of the associated persona"
          },
          "scenario_type": {
            "$ref": "#/components/schemas/ScenarioType",
            "description": "Type of scenario (PEAKMOJO, USER, WORKSPACE)"
          },
          "metadata": {
            "$ref": "#/components/schemas/ScenarioMetadata",
            "description": "Additional metadata about the scenario"
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Tags",
            "description": "List of tags"
          },
          "user_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "User Id",
            "description": "Owner user ID for USER type scenarios"
          },
          "workspace_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Workspace Id",
            "description": "Owner workspace ID for WORKSPACE type scenarios"
          }
        },
        "type": "object",
        "required": [
          "name",
          "description",
          "instruction",
          "persona_id",
          "scenario_type"
        ],
        "title": "ScenarioCreate",
        "description": "Model for creating a new scenario"
      },
      "ScenarioInDB": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the scenario"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Description of the scenario"
          },
          "instruction": {
            "type": "string",
            "title": "Instruction",
            "description": "Instructions for the scenario"
          },
          "persona_id": {
            "type": "string",
            "title": "Persona Id",
            "description": "ID of the associated persona"
          },
          "scenario_type": {
            "$ref": "#/components/schemas/ScenarioType",
            "description": "Type of scenario (PEAKMOJO, USER, WORKSPACE)"
          },
          "metadata": {
            "$ref": "#/components/schemas/ScenarioMetadata",
            "description": "Additional metadata about the scenario"
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Tags",
            "description": "List of tags"
          },
          "user_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "User Id",
            "description": "Owner user ID for USER type scenarios"
          },
          "workspace_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Workspace Id",
            "description": "Owner workspace ID for WORKSPACE type scenarios"
          },
          "id": {
            "type": "string",
            "title": "Id",
            "description": "Unique identifier for the scenario"
          },
          "entity_type": {
            "$ref": "#/components/schemas/EntityType",
            "description": "Entity type, always SCENARIO",
            "default": "SCENARIO"
          },
          "created_at": {
            "type": "string",
            "title": "Created At",
            "description": "Unix timestamp of creation"
          },
          "updated_at": {
            "type": "string",
            "title": "Updated At",
            "description": "Unix timestamp of last update"
          }
        },
        "type": "object",
        "required": [
          "name",
          "description",
          "instruction",
          "persona_id",
          "scenario_type",
          "id",
          "created_at",
          "updated_at"
        ],
        "title": "ScenarioInDB",
        "description": "Model for scenario as stored in database"
      },
      "ScenarioInfo": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "description": "Unique identifier of the scenario"
          },
          "title": {
            "type": "string",
            "title": "Title",
            "description": "Title of the scenario"
          },
          "objectives": {
            "items": {

            },
            "type": "array",
            "title": "Objectives",
            "description": "List of objectives"
          }
        },
        "type": "object",
        "required": [
          "id",
          "title"
        ],
        "title": "ScenarioInfo"
      },
      "ScenarioMetadata": {
        "properties": {
          "industry": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Industry",
            "description": "Industry the scenario is related to"
          },
          "practice_group": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Practice Group",
            "description": "Practice group the scenario belongs to"
          },
          "experience_level": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Experience Level",
            "description": "Required experience level"
          },
          "required_skills": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Required Skills",
            "description": "List of required skills"
          },
          "duration": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Duration",
            "description": "Expected duration in minutes"
          },
          "objectives": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Objectives",
            "description": "Learning objectives"
          },
          "difficulty": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Difficulty",
            "description": "Difficulty level of the scenario"
          },
          "category": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Category",
            "description": "Category of the scenario"
          },
          "subcategory": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Subcategory",
            "description": "Subcategory within the category"
          }
        },
        "type": "object",
        "title": "ScenarioMetadata",
        "description": "Metadata for a scenario"
      },
      "ScenarioResponse": {
        "properties": {
          "scenario": {
            "$ref": "#/components/schemas/ScenarioInDB"
          }
        },
        "type": "object",
        "required": [
          "scenario"
        ],
        "title": "ScenarioResponse",
        "description": "Response model for single scenario"
      },
      "ScenarioType": {
        "type": "string",
        "enum": [
          "PEAKMOJO",
          "USER",
          "WORKSPACE"
        ],
        "title": "ScenarioType"
      },
      "ScenarioUpdate": {
        "properties": {
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name",
            "description": "Name of the scenario"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "Description of the scenario"
          },
          "instruction": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Instruction",
            "description": "Instructions for the scenario"
          },
          "persona_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Persona Id",
            "description": "ID of the associated persona"
          },
          "metadata": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ScenarioMetadata"
              },
              {
                "type": "null"
              }
            ],
            "description": "Additional metadata"
          },
          "tags": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tags",
            "description": "List of tags"
          }
        },
        "type": "object",
        "title": "ScenarioUpdate",
        "description": "Model for updating an existing scenario"
      },
      "ScenariosListResponse": {
        "properties": {
          "scenarios": {
            "items": {
              "$ref": "#/components/schemas/ScenarioInDB"
            },
            "type": "array",
            "title": "Scenarios"
          }
        },
        "type": "object",
        "required": [
          "scenarios"
        ],
        "title": "ScenariosListResponse",
        "description": "Response model for multiple scenarios"
      },
      "SkillResponse": {
        "properties": {
          "skill": {
            "$ref": "#/components/schemas/handlers__skills__Skill",
            "description": "Skill details"
          }
        },
        "type": "object",
        "required": [
          "skill"
        ],
        "title": "SkillResponse"
      },
      "SkillsResponse": {
        "properties": {
          "skills": {
            "items": {
              "$ref": "#/components/schemas/handlers__skills__Skill"
            },
            "type": "array",
            "title": "Skills",
            "description": "List of skills"
          }
        },
        "type": "object",
        "required": [
          "skills"
        ],
        "title": "SkillsResponse"
      },
      "StatusHistory": {
        "properties": {
          "status": {
            "$ref": "#/components/schemas/ApplicationStatus",
            "description": "Application status"
          },
          "timestamp": {
            "type": "string",
            "title": "Timestamp",
            "description": "Unix timestamp of the status change"
          },
          "notes": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Notes",
            "description": "Notes about the status change"
          }
        },
        "type": "object",
        "required": [
          "status",
          "timestamp"
        ],
        "title": "StatusHistory",
        "description": "Model for application status history"
      },
      "UpdateUserCertificateRequest": {
        "properties": {
          "progress": {
            "anyOf": [
              {
                "type": "integer",
                "maximum": 100,
                "minimum": 0
              },
              {
                "type": "null"
              }
            ],
            "title": "Progress",
            "description": "Progress percentage (0-100)"
          },
          "level": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Level",
            "description": "Certificate level (ENTRY_LEVEL, INTERMEDIATE, ADVANCED)"
          }
        },
        "type": "object",
        "title": "UpdateUserCertificateRequest",
        "description": "Request model for updating a user certificate"
      },
      "UpdateUserCourseRequest": {
        "properties": {
          "completed": {
            "type": "boolean",
            "title": "Completed",
            "description": "Whether the user has completed the course"
          }
        },
        "type": "object",
        "required": [
          "completed"
        ],
        "title": "UpdateUserCourseRequest",
        "description": "Request model for updating user's course progress"
      },
      "UpdateUserSkillRequest": {
        "properties": {
          "progress": {
            "anyOf": [
              {
                "type": "integer",
                "maximum": 100,
                "minimum": 0
              },
              {
                "type": "null"
              }
            ],
            "title": "Progress",
            "description": "New progress percentage"
          }
        },
        "type": "object",
        "title": "UpdateUserSkillRequest"
      },
      "User": {
        "properties": {
          "user_id": {
            "type": "string",
            "title": "User Id",
            "description": "Unique identifier for the user"
          },
          "email": {
            "type": "string",
            "format": "email",
            "title": "Email",
            "description": "User's email address"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "User's full name"
          },
          "entity_type": {
            "type": "string",
            "const": "USER",
            "title": "Entity Type",
            "description": "Entity type, always USER",
            "default": "USER"
          },
          "created_at": {
            "type": "integer",
            "title": "Created At",
            "description": "Unix timestamp of when the user was created"
          },
          "updated_at": {
            "type": "integer",
            "title": "Updated At",
            "description": "Unix timestamp of when the user was last updated"
          }
        },
        "type": "object",
        "required": [
          "user_id",
          "email",
          "name",
          "created_at",
          "updated_at"
        ],
        "title": "User",
        "description": "Base user model"
      },
      "UserCertificate": {
        "properties": {
          "user_id": {
            "type": "string",
            "title": "User Id",
            "description": "User ID"
          },
          "certificate_id": {
            "type": "string",
            "title": "Certificate Id",
            "description": "Certificate ID"
          },
          "status": {
            "$ref": "#/components/schemas/CertificateStatus",
            "description": "Certificate status"
          },
          "progress": {
            "type": "integer",
            "maximum": 100,
            "minimum": 0,
            "title": "Progress",
            "description": "Progress percentage (0-100)",
            "default": 0
          },
          "level": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Level",
            "description": "Certificate level (ENTRY_LEVEL, INTERMEDIATE, ADVANCED)"
          },
          "issued_at": {
            "type": "string",
            "title": "Issued At",
            "description": "Unix timestamp when the certificate was issued"
          },
          "expires_at": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Expires At",
            "description": "Unix timestamp when the certificate expires"
          },
          "revoked_at": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Revoked At",
            "description": "Unix timestamp when the certificate was revoked"
          },
          "revocation_reason": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Revocation Reason",
            "description": "Reason for certificate revocation"
          }
        },
        "type": "object",
        "required": [
          "user_id",
          "certificate_id",
          "status",
          "issued_at"
        ],
        "title": "UserCertificate",
        "description": "User certificate model"
      },
      "UserCertificateResponse": {
        "properties": {
          "user_id": {
            "type": "string",
            "title": "User Id",
            "description": "User ID"
          },
          "certificate_id": {
            "type": "string",
            "title": "Certificate Id",
            "description": "Certificate ID"
          },
          "status": {
            "$ref": "#/components/schemas/CertificateStatus",
            "description": "Certificate status"
          },
          "progress": {
            "type": "integer",
            "maximum": 100,
            "minimum": 0,
            "title": "Progress",
            "description": "Progress percentage (0-100)",
            "default": 0
          },
          "level": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Level",
            "description": "Certificate level (ENTRY_LEVEL, INTERMEDIATE, ADVANCED)"
          },
          "issued_at": {
            "type": "string",
            "title": "Issued At",
            "description": "Unix timestamp when the certificate was issued"
          },
          "expires_at": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Expires At",
            "description": "Unix timestamp when the certificate expires"
          },
          "revoked_at": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Revoked At",
            "description": "Unix timestamp when the certificate was revoked"
          },
          "revocation_reason": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Revocation Reason",
            "description": "Reason for certificate revocation"
          }
        },
        "type": "object",
        "required": [
          "user_id",
          "certificate_id",
          "status",
          "issued_at"
        ],
        "title": "UserCertificateResponse",
        "description": "Response model for a single user certificate"
      },
      "UserCertificatesListResponse": {
        "properties": {
          "certificates": {
            "items": {
              "$ref": "#/components/schemas/UserCertificate"
            },
            "type": "array",
            "title": "Certificates",
            "description": "List of user certificates"
          }
        },
        "type": "object",
        "required": [
          "certificates"
        ],
        "title": "UserCertificatesListResponse",
        "description": "Response model for list of user certificates"
      },
      "UserInfo": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "description": "Unique identifier of the user"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the user"
          },
          "user_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "User Id"
          }
        },
        "type": "object",
        "required": [
          "id",
          "name"
        ],
        "title": "UserInfo"
      },
      "UserResponse": {
        "properties": {
          "user": {
            "$ref": "#/components/schemas/User"
          }
        },
        "type": "object",
        "required": [
          "user"
        ],
        "title": "UserResponse",
        "description": "Single user response"
      },
      "UserSkillResponse": {
        "properties": {
          "skill": {
            "$ref": "#/components/schemas/handlers__skills__Skill"
          },
          "progress": {
            "type": "integer",
            "maximum": 100,
            "minimum": 0,
            "title": "Progress",
            "description": "Progress percentage (0-100)",
            "default": 0
          },
          "is_certified": {
            "type": "boolean",
            "title": "Is Certified",
            "description": "Whether the user has been certified in this skill",
            "default": false
          },
          "last_update": {
            "type": "string",
            "title": "Last Update",
            "description": "Unix timestamp of last update"
          },
          "completed_date": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Completed Date",
            "description": "Unix timestamp when skill was completed"
          }
        },
        "type": "object",
        "required": [
          "skill",
          "last_update"
        ],
        "title": "UserSkillResponse"
      },
      "UserSkillsResponse": {
        "properties": {
          "skills": {
            "items": {
              "$ref": "#/components/schemas/UserSkillResponse"
            },
            "type": "array",
            "title": "Skills"
          }
        },
        "type": "object",
        "title": "UserSkillsResponse"
      },
      "UserStats": {
        "properties": {
          "overview": {
            "$ref": "#/components/schemas/UserStatsOverview"
          },
          "status_breakdown": {
            "additionalProperties": {
              "type": "integer"
            },
            "type": "object",
            "title": "Status Breakdown",
            "description": "Count of applications by status"
          },
          "interviews": {
            "$ref": "#/components/schemas/UserStatsInterviews"
          }
        },
        "type": "object",
        "required": [
          "overview",
          "status_breakdown",
          "interviews"
        ],
        "title": "UserStats",
        "description": "Complete user statistics"
      },
      "UserStatsInterviews": {
        "properties": {
          "upcoming": {
            "items": {
              "$ref": "#/components/schemas/InterviewData"
            },
            "type": "array",
            "title": "Upcoming",
            "description": "List of upcoming interviews"
          },
          "recent": {
            "items": {
              "$ref": "#/components/schemas/InterviewData"
            },
            "type": "array",
            "title": "Recent",
            "description": "List of recent interviews"
          }
        },
        "type": "object",
        "title": "UserStatsInterviews",
        "description": "User interview statistics"
      },
      "UserStatsOverview": {
        "properties": {
          "total_applications": {
            "type": "integer",
            "title": "Total Applications",
            "description": "Total number of applications",
            "default": 0
          },
          "active_applications": {
            "type": "integer",
            "title": "Active Applications",
            "description": "Number of active applications",
            "default": 0
          },
          "total_interviews": {
            "type": "integer",
            "title": "Total Interviews",
            "description": "Total number of interviews",
            "default": 0
          },
          "offers_received": {
            "type": "integer",
            "title": "Offers Received",
            "description": "Number of offers received",
            "default": 0
          },
          "offers_accepted": {
            "type": "integer",
            "title": "Offers Accepted",
            "description": "Number of offers accepted",
            "default": 0
          },
          "applications_rejected": {
            "type": "integer",
            "title": "Applications Rejected",
            "description": "Number of rejected applications",
            "default": 0
          },
          "success_rate": {
            "type": "number",
            "title": "Success Rate",
            "description": "Success rate (offers received / total applications)",
            "default": 0
          },
          "conversion_rate": {
            "type": "number",
            "title": "Conversion Rate",
            "description": "Conversion rate (offers accepted / offers received)",
            "default": 0
          },
          "profile_views": {
            "type": "integer",
            "title": "Profile Views",
            "description": "Number of profile views",
            "default": 0
          }
        },
        "type": "object",
        "title": "UserStatsOverview",
        "description": "User statistics overview"
      },
      "UserStatsResponse": {
        "properties": {
          "stats": {
            "$ref": "#/components/schemas/UserStats"
          }
        },
        "type": "object",
        "required": [
          "stats"
        ],
        "title": "UserStatsResponse",
        "description": "User statistics response"
      },
      "UserStatsUpdateRequest": {
        "properties": {
          "profile_views": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Profile Views",
            "description": "Number of profile views to increment"
          },
          "total_interviews": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Total Interviews",
            "description": "Total number of interviews to increment"
          },
          "offers_received": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Offers Received",
            "description": "Number of offers received to increment"
          },
          "offers_accepted": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Offers Accepted",
            "description": "Number of offers accepted to increment"
          },
          "applications_rejected": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Applications Rejected",
            "description": "Number of rejected applications to increment"
          }
        },
        "type": "object",
        "title": "UserStatsUpdateRequest",
        "description": "Request model for updating user statistics"
      },
      "UsersResponse": {
        "properties": {
          "users": {
            "items": {
              "$ref": "#/components/schemas/User"
            },
            "type": "array",
            "title": "Users"
          }
        },
        "type": "object",
        "required": [
          "users"
        ],
        "title": "UsersResponse",
        "description": "Multiple users response"
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationError"
      },
      "handlers__skills__Skill": {
        "properties": {
          "skill_id": {
            "type": "string",
            "title": "Skill Id",
            "description": "Unique identifier for the skill"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the skill"
          },
          "category": {
            "type": "string",
            "title": "Category",
            "description": "Category the skill belongs to"
          },
          "level": {
            "type": "string",
            "title": "Level",
            "description": "Skill level (ENTRY_LEVEL/INTERMEDIATE/ADVANCED)"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "Description of the skill"
          },
          "prerequisites": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Prerequisites",
            "description": "List of prerequisite skill IDs",
            "default": []
          },
          "created_at": {
            "type": "string",
            "title": "Created At",
            "description": "Unix timestamp when the skill was created"
          },
          "updated_at": {
            "type": "string",
            "title": "Updated At",
            "description": "Unix timestamp when the skill was last updated"
          }
        },
        "type": "object",
        "required": [
          "skill_id",
          "name",
          "category",
          "level",
          "created_at",
          "updated_at"
        ],
        "title": "Skill"
      },
      "models__job__Skill": {
        "properties": {
          "skill_id": {
            "type": "string",
            "title": "Skill Id",
            "description": "Skill unique identifier"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Skill name"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Skill description"
          },
          "level": {
            "type": "string",
            "title": "Level",
            "description": "Skill level"
          },
          "category": {
            "type": "string",
            "title": "Category",
            "description": "Skill category"
          },
          "prerequisites": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Prerequisites",
            "description": "List of prerequisite skill IDs",
            "default": []
          },
          "created_at": {
            "type": "string",
            "title": "Created At",
            "description": "Creation timestamp"
          },
          "updated_at": {
            "type": "string",
            "title": "Updated At",
            "description": "Last update timestamp"
          }
        },
        "type": "object",
        "required": [
          "skill_id",
          "name",
          "description",
          "level",
          "category",
          "created_at",
          "updated_at"
        ],
        "title": "Skill",
        "description": "Skill model"
      }
    },
    "securitySchemes": {
      "HTTPBearer": {
        "type": "http",
        "scheme": "bearer"
      }
    }
  }
}